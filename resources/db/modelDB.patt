package models
import play.api.db.DB
import anorm._
// Import necessaire pour definir une var implicite Application
import play.api.Play.current
import anorm.SqlParser._
// nom entite ; parametres 
case class %s(%s)
// nom entite
object %s {
  // represente un parser de ligne pour la table Tache
  val tache = {
  // implementation row parser
  	%s
  /*
    get[Long]("id") ~ get[String]("label") map {
      case id ~ labl => Tache(id, labl)*/
    }
  }
  def all(): List[Tache] = DB.withConnection { implicit c =>
    Sql.sql("select * from tache").as(tache *)
  }
  def create(label: String) {
    DB.withConnection { implicit c =>
      Sql.sql("insert into tache (label) values ({label})").on(
        'label -> label).executeUpdate()
    } // L'apostrophe signifie un symbole literal. Cela permet par exemple de comparer des strings sans se soucier si 2 meme chaines partagent la meme reference
  }
  def delete(id: Long) {
    DB.withConnection { implicit c =>
      SQL("delete from %s where id = {id}").on(
        'id -> id).executeUpdate()
    }
  }
}